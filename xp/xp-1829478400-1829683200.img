          ) = 1   /* final magic...compare Grants   */
        )
    )   
    union all
    select
        db_name(r.rkeydbid),
        user_name(o1.uid),
        o1.name,
        c1.name,
        convert(binary(16),null),
        convert(int,null),
        db_name(r.fkeydbid),
        user_name(o2.uid),
        o2.name,
        c2.name,
        convert(binary(16),null),
        convert(int,null),
        convert(int,16),
        'NO ACTION',
        'NO ACTION',
        i.name,
        object_name(r.constid),
        convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i, sysusers u
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and r.keycnt >= 16
    and c1.colid = r.rkey16
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey16
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid
    and u.uid = user_id()
    and ( suser_id() = 1     /* User is the System Administrator */
    or (
        o1.uid = user_id()   /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o1.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
        )
    and (
        o2.uid = user_id()   /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o2.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
        )
    )
    order by 8,9,2,3,13
    END

    exec @ret = sp_cursoropen @handle output, 'select * from #spfkeysrowset1',
        @scrollopt output, @ccopt output, @rows output

    drop table #spfkeysrowset1
    return isnull(@ret,0)
go
dump tran master with no_log
go
CREATE PROCEDURE sp_foreign_keys_rowset;3
as
    select
        PK_TABLE_CATALOG    = convert(sysname,' '),
        PK_TABLE_SCHEMA     = convert(sysname,' '),
        PK_TABLE_NAME       = convert(sysname,' '),
        PK_COLUMN_NAME      = convert(sysname,' '),
        PK_COLUMN_GUID      = convert(binary(16),null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = convert(sysname,' '),
        FK_TABLE_SCHEMA     = convert(sysname,' '),
        FK_TABLE_NAME       = convert(sysname,' '),
        FK_COLUMN_NAME      = convert(sysname,' '),
        FK_COLUMN_GUID      = convert(binary(16),null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,1),
        UPDATE_RULE         = 'NO ACTION',
        DELETE_RULE         = 'NO ACTION',
        PK_NAME             = convert(sysname, ' '),
        FK_NAME             = convert(sysname, ' '),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    where   1=0
go
dump tran master with no_log
go


if (charindex('7.00', @@version) = 0 and
    charindex('8.00', @@version) = 0)
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
else
    drop proc sp_foreign_keys_rowset
go


/*  Procedure for 8.0 server */
CREATE PROCEDURE sp_foreign_keys_rowset
    (
    @pk_table_name      sysname,
    @pk_table_schema    sysname = null,
    @fk_table_name      sysname = null,
    @fk_table_schema    sysname = null,
    @fk_table_catalog   sysname = null
    )
as
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,1),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and c1.colid = r.rkey1
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey1
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,2),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and c1.colid = r.rkey2
    and r.keycnt >= 2
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey2
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,3),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and c1.colid = r.rkey3
    and r.keycnt >= 3
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey3
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0 
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,4),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 4
    and o1.id = c1.id
    and c1.colid = r.rkey4
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey4
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid   
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,5),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 5
    and o1.id = c1.id
    and c1.colid = r.rkey5
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey5
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,6),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 6
    and o1.id = c1.id
    and c1.colid = r.rkey6
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey6
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,7),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 7
    and o1.id = c1.id
    and c1.colid = r.rkey7
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey7
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,8),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 8
    and o1.id = c1.id
    and c1.colid = r.rkey8
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey8
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,9),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 9
    and o1.id = c1.id
    and c1.colid = r.rkey9
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey9
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,10),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 10
    and o1.id = c1.id
    and c1.colid = r.rkey10
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey10
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,11),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 11
    and o1.id = c1.id
    and c1.colid = r.rkey11
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey11
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,12),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 12
    and o1.id = c1.id
    and c1.colid = r.rkey12
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey12
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,13),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 13
    and o1.id = c1.id
    and c1.colid = r.rkey13
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey13
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,14),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 14
    and o1.id = c1.id
    and c1.colid = r.rkey14
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey14
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,15),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 15
    and o1.id = c1.id
    and c1.colid = r.rkey15
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey15
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,16),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and o1.name = @pk_table_name
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 16
    and o1.id = c1.id
    and c1.colid = r.rkey16
    and r.fkeyid = o2.id
    and (@fk_table_name is null or @fk_table_name = o2.name)
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey16
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    order by 8,9,2,3,13
go
dump tran master with no_log
go
CREATE PROCEDURE sp_foreign_keys_rowset;2
    (
    @fk_table_name      sysname,
    @fk_table_schema    sysname = null,
    @pk_table_name      sysname = null,
    @pk_table_schema    sysname = null,
    @pk_table_catalog   sysname = null
    )
as
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,1),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and o2.id = c2.id
    and c2.colid = r.fkey1
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey1
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,2),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 2
    and o2.id = c2.id
    and c2.colid = r.fkey2
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey2
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,3),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 3
    and o2.id = c2.id
    and c2.colid = r.fkey3
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey3
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,4),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 4
    and o2.id = c2.id
    and c2.colid = r.fkey4
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey4
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,5),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 5
    and o2.id = c2.id
    and c2.colid = r.fkey5
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey5
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,6),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 6
    and o2.id = c2.id
    and c2.colid = r.fkey6
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id       
    and c1.colid = r.rkey6
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,7),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 7
    and o2.id = c2.id
    and c2.colid = r.fkey7
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey7
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,8),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 8
    and o2.id = c2.id
    and c2.colid = r.fkey8
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey8
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,9),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 9
    and o2.id = c2.id
    and c2.colid = r.fkey9
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey9
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,10),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 10
    and o2.id = c2.id
    and c2.colid = r.fkey10
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey10
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,11),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 11
    and o2.id = c2.id
    and c2.colid = r.fkey11
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey11
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,12),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 12
    and o2.id = c2.id
    and c2.colid = r.fkey12
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey12
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,13),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 13
    and o2.id = c2.id
    and c2.colid = r.fkey13
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey13
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,14),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 14
    and o2.id = c2.id
    and c2.colid = r.fkey14
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey14
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,15),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/      
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 15
    and o2.id = c2.id
    and c2.colid = r.fkey15
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey15
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid           
    union   all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,16),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/      
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and o2.name = @fk_table_name
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = r.fkeyid
    and r.keycnt >= 16
    and o2.id = c2.id
    and c2.colid = r.fkey16
    and r.rkeyid = o1.id
    and (@pk_table_name is null or @pk_table_name = o1.name)
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = c1.id   
    and c1.colid = r.rkey16
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    order by 8,9,2,3,13
go
dump tran master with no_log
go
CREATE PROCEDURE sp_foreign_keys_rowset;3
    (
    @pk_table_schema    sysname = null,
    @pk_table_catalog   sysname = null,
    @fk_table_schema    sysname = null,
    @fk_table_catalog   sysname = null
    )
as
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,1),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/      
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and c1.colid = r.rkey1
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey1
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,2),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 2
    and o1.id = c1.id
    and c1.colid = r.rkey2
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey2
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,3),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 3
    and o1.id = c1.id
    and c1.colid = r.rkey3
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey3
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,4),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 4
    and o1.id = c1.id
    and c1.colid = r.rkey4
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey4
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,5),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 5
    and o1.id = c1.id
    and c1.colid = r.rkey5
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey5
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,6),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 6
    and o1.id = c1.id
    and c1.colid = r.rkey6
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey6
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,7),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 7
    and o1.id = c1.id
    and c1.colid = r.rkey7
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey7
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,8),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 8
    and o1.id = c1.id
    and c1.colid = r.rkey8
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey8
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,9),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 9
    and o1.id = c1.id
    and c1.colid = r.rkey9
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey9
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,10),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 10
    and o1.id = c1.id
    and c1.colid = r.rkey10
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey10
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,11),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 11
    and o1.id = c1.id
    and c1.colid = r.rkey11
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey11
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,12),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 12
    and o1.id = c1.id
    and c1.colid = r.rkey12
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey12
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,13),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 13
    and o1.id = c1.id
    and c1.colid = r.rkey13
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey13
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,14),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 14
    and o1.id = c1.id
    and c1.colid = r.rkey14
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey14
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,15),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and r.keycnt >= 15
    and o1.id = c1.id
    and c1.colid = r.rkey15
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey15
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    union all
    select
        PK_TABLE_CATALOG    = db_name(r.rkeydbid),
        PK_TABLE_SCHEMA     = user_name(o1.uid),
        PK_TABLE_NAME       = o1.name,
        PK_COLUMN_NAME      = c1.name,
        PK_COLUMN_GUID      = convert(uniqueidentifier,null),
        PK_COLUMN_PROPID    = convert(int,null),
        FK_TABLE_CATALOG    = db_name(r.fkeydbid),
        FK_TABLE_SCHEMA     = user_name(o2.uid),
        FK_TABLE_NAME       = o2.name,
        FK_COLUMN_NAME      = c2.name,
        FK_COLUMN_GUID      = convert(uniqueidentifier,null),
        FK_COLUMN_PROPID    = convert(int,null),
        ORDINAL             = convert(int,16),
        UPDATE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsUpdateCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        DELETE_RULE = CASE WHEN (ObjectProperty(r.constid, 'CnstIsDeleteCascade')=1) THEN N'CASCADE' ELSE N'NO ACTION' END,
        PK_NAME             = i.name,
        FK_NAME             = object_name(r.constid),
        DEFERRABILITY       = convert(smallint, 3) /*DBPROPVAL_DF_NOT_DEFERRABLE*/
    from
        sysobjects o1, sysobjects o2,
        syscolumns c1, syscolumns c2,
        sysreferences r, sysindexes i
    where   
        (@pk_table_catalog is null or @pk_table_catalog = db_name())
    and     (@fk_table_catalog is null or @fk_table_catalog = db_name())
    and (@pk_table_schema is null or @pk_table_schema = user_name(o1.uid))
    and o1.id = r.rkeyid
    and o1.id = c1.id
    and r.keycnt >= 16
    and c1.colid = r.rkey16
    and r.fkeyid = o2.id
    and (@fk_table_schema is null or @fk_table_schema = user_name(o2.uid))
    and o2.id = c2.id   
    and c2.colid = r.fkey16
    and permissions(o1.id) <> 0
    and permissions(o2.id) <> 0
    and i.id = r.rkeyid
    and i.indid = r.rkeyindid       
    order by 8,9,2,3,13
go
dump tran master with no_log
go
create procedure sp_foreign_keys_rowset;5
    (
    @server_name        sysname,
    @pk_catalog_name    sysname = null,
    @fk_catalog_name    sysname = null,
    @pk_table_name      sysname = null,
    @pk_table_schema    sysname = null,
    @fk_table_name      sysname = null,
    @fk_table_schema    sysname = null
    )
as
    select
        PK_TABLE_CATALOG,
        PK_TABLE_SCHEMA,    
        PK_TABLE_NAME,  
        PK_COLUMN_NAME,     
        PK_COLUMN_GUID, 
        PK_COLUMN_PROPID,
        FK_TABLE_CATALOG,
        FK_TABLE_SCHEMA, 
        FK_TABLE_NAME,  
        FK_COLUMN_NAME,     
        FK_COLUMN_GUID, 
        FK_COLUMN_PROPID,
        ORDINAL,        
        UPDATE_RULE,    
        DELETE_RULE
        --PK_NAME,      
        --FK_NAME,
        --DEFERRABILITY 
    from master.dbo.SYSREMOTE_FOREIGN_KEYS (
                @server_name,
                @pk_catalog_name,
                @pk_table_schema,
                @pk_table_name,
                @fk_catalog_name,
                @fk_table_schema,
                @fk_table_name )
    order by 7,8,9,1,2,3,13
go

grant execute on sp_foreign_keys_rowset to public
go

dump tran master with no_log
go
if (charindex('6.00', @@version) > 0)
    begin
    if (exists (select * from sysobjects
            where name = 'sp_foreign_keys_rowset' and type = 'P '))
        begin
        drop procedure sp_foreign_keys_rowset
        dump tran master with no_log
        end
    end
go


print ''
print 'creating sp_indexes_rowset'
go

/*  6.0 and 6.5 version */
create procedure sp_indexes_rowset
    (
    @table_name varchar(255), 
    @index_name varchar(255) = null,
    @table_schema   varchar(255) = null  
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int,
                       (
                        select count(*)
                        from syscolumns sc
                        where sc.id     =  c.id
                          AND sc.number =  c.number
                          AND sc.colid  <= c.colid
                        )),
        COLUMN_NAME     = index_col(user_name(o.uid)+'.'+o.name, x.indid, c.colid),
        COLUMN_GUID     = convert(binary(16),null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint, 1 /* DB_COLLATION_ASC */),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(varchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16)
        
    from    sysobjects o, sysindexes x, syscolumns c, sysusers u
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and     x.id = o.id
    and     x.id = c.id
    and     c.colid < x.keycnt+(x.status&16)/16
    and     u.uid = user_id() /* constrain sysusers uid for use in subquery */
    and     (
        suser_id() = 1   /* User is the System Administrator */
        or o.uid = user_id()     /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
           )
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go
create procedure sp_indexes_rowset;2
    (
    @index_name varchar(255) = null,
    @table_schema   varchar(255) = null  
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int,
                       (
                        select count(*)
                        from syscolumns sc
                        where sc.id     =  c.id
                          AND sc.number =  c.number
                          AND sc.colid  <= c.colid
                        )),
        COLUMN_NAME     = index_col(user_name(o.uid)+'.'+o.name, x.indid, c.colid),
        COLUMN_GUID     = convert(binary(16),null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint, 1 /* DB_COLLATION_ASC */),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(varchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16) 
        
    from    sysobjects o, sysindexes x, syscolumns c, sysusers u
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and     x.id = o.id
    and     x.id = c.id
    and     c.colid < x.keycnt+(x.status&16)/16
    and     u.uid = user_id() /* constrain sysusers uid for use in subquery */
    and     (
        suser_id() = 1   /* User is the System Administrator */
        or o.uid = user_id()     /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
           )
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go

if (charindex('7.00', @@version) > 0 or
    charindex('8.00', @@version) > 0)
    drop procedure sp_indexes_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 7.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/*  7.0 version */
create procedure sp_indexes_rowset
    (
    @table_name sysname, 
    @index_name sysname = null,
    @table_schema   sysname = null   
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int, xk.keyno),
        COLUMN_NAME     = c.name,
        COLUMN_GUID     = convert(uniqueidentifier,null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint, 1 /* DB_COLLATION_ASC */),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(nvarchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16) 
        
    from    sysobjects o, sysindexes x, syscolumns c, sysindexkeys xk
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and x.id = o.id
    and o.id = c.id
    and o.id = xk.id
    and x.indid = xk.indid
    and c.colid = xk.colid
    and xk.keyno <= x.keycnt
    and permissions(o.id, c.name) <> 0
    and     (x.status&32) = 0  -- No hypothetical indexes
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go
create procedure sp_indexes_rowset;2
    (
    @index_name sysname = null,
    @table_schema   sysname = null   
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int, xk.keyno),
        COLUMN_NAME     = c.name,
        COLUMN_GUID     = convert(uniqueidentifier,null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint, 1 /* DB_COLLATION_ASC */),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(nvarchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16) 
        
    from    sysobjects o, sysindexes x, syscolumns c, sysindexkeys xk
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and x.id = o.id
    and o.id = c.id
    and o.id = xk.id
    and x.indid = xk.indid
    and c.colid = xk.colid
    and xk.keyno <= x.keycnt
    and permissions(o.id, c.name) <> 0
    and (x.status&32) = 0  -- No hypothetical indexes
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go
create procedure sp_indexes_rowset;5
    (
    @table_server       sysname,
    @table_catalog      sysname = null,
    @table_name     sysname = null,
    @index_name     sysname = null,
    @table_schema       sysname = null
    )
as
    select
        TABLE_CATALOG,  
        TABLE_SCHEMA,   
        TABLE_NAME, 
        INDEX_CATALOG,      
        INDEX_SCHEMA,   
        INDEX_NAME, 
        PRIMARY_KEY,    
        "UNIQUE",   
        "CLUSTERED",    
        "TYPE",     
        FILL_FACTOR,    
        INITIAL_SIZE,   
        NULLS,      
        SORT_BOOKMARKS, 
        AUTO_UPDATE,    
        NULL_COLLATION, 
        ORDINAL_POSITION,
        COLUMN_NAME,    
        COLUMN_GUID,    
        COLUMN_PROPID,  
        COLLATION,  
        CARDINALITY,    
        PAGES,      
        FILTER_CONDITION
    --  INTEGRATED
    from master.dbo.SYSREMOTE_INDEXES (
                @table_server,
                @table_catalog,
                @table_schema,
                @index_name,
                NULL,           /* TYPE (index type) */
                @table_name )
    order by 8 desc, 4, 5, 6, 17
go

grant execute on sp_indexes_rowset to public
go

dump tran master with no_log
go

if (charindex('8.00', @@version) > 0)
    drop procedure sp_indexes_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/*  8.0 version */
create procedure sp_indexes_rowset
    (
    @table_name sysname, 
    @index_name sysname = null,
    @table_schema   sysname = null   
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int, xk.keyno),
        COLUMN_NAME     = c.name,
        COLUMN_GUID     = convert(uniqueidentifier,null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint,
                        case when indexkey_property(o.id, x.indid, xk.keyno, 'IsDescending') =1
                        then 2      /* DB_COLLATION_DESC */ 
                        else 1      /* DB_COLLATION_ASC */ 
                        end),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(nvarchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16) 
        
    from    sysobjects o, sysindexes x, syscolumns c, sysindexkeys xk
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and x.id = o.id
    and o.id = c.id
    and o.id = xk.id
    and x.indid = xk.indid
    and c.colid = xk.colid
    and xk.keyno <= x.keycnt
    and permissions(o.id, c.name) <> 0
    and     (x.status&32) = 0  -- No hypothetical indexes
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go
create procedure sp_indexes_rowset;2
    (
    @index_name sysname = null,
    @table_schema   sysname = null   
    )
as
    select  TABLE_CATALOG       = db_name(),
        TABLE_SCHEMA        = user_name(o.uid),
        TABLE_NAME      = o.name,
        INDEX_CATALOG       = db_name(),        
        INDEX_SCHEMA        = user_name(o.uid),
        INDEX_NAME      = x.name,
        PRIMARY_KEY     = convert(bit,(x.status & 0x800)/0x800),
        "UNIQUE"        = convert(bit,(x.status & 2)/2),
        "CLUSTERED"     = convert(bit,(x.status & 16)/16),
        "TYPE"          = convert(smallint, 1 /*DBPROPVAL_IT_BTREE*/),
        FILL_FACTOR     = convert(int, x.OrigFillFactor),
        INITIAL_SIZE        = convert(int,null),
        NULLS           = convert(int,null),
        SORT_BOOKMARKS      = convert(bit,0),
        AUTO_UPDATE     = convert(bit,1),
        NULL_COLLATION      = convert(int,4 /*DBPROPVAL_NC_LOW*/),
        ORDINAL_POSITION    = convert(int, xk.keyno),
        COLUMN_NAME     = c.name,
        COLUMN_GUID     = convert(uniqueidentifier,null),
        COLUMN_PROPID       = convert(int,null),
        COLLATION   = convert(smallint,
                        case when indexkey_property(o.id, x.indid, xk.keyno, 'IsDescending') =1
                        then 2      /* DB_COLLATION_DESC */ 
                        else 1      /* DB_COLLATION_ASC */ 
                        end),
        CARDINALITY     = case when (x.status & 2) = 2 then x.rows else null end,
        PAGES           = convert(int, x.dpages),
        FILTER_CONDITION    = convert(nvarchar(1),null),
        INTEGRATED      = convert(bit,(x.status & 16)/16) 
        
    from    sysobjects o, sysindexes x, syscolumns c, sysindexkeys xk
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and (@index_name is null or @index_name = x.name)
    and x.id = o.id
    and o.id = c.id
    and o.id = xk.id
    and x.indid = xk.indid
    and c.colid = xk.colid
    and xk.keyno <= x.keycnt
    and permissions(o.id, c.name) <> 0
    and (x.status&32) = 0  -- No hypothetical indexes
    order by 8 desc, 4, 5, 6, 17
go
dump tran master with no_log
go
create procedure sp_indexes_rowset;5
    (
    @table_server       sysname,
    @table_catalog      sysname = null,
    @table_name     sysname = null,
    @index_name     sysname = null,
    @table_schema       sysname = null
    )
as
    select
        TABLE_CATALOG,  
        TABLE_SCHEMA,   
        TABLE_NAME, 
        INDEX_CATALOG,      
        INDEX_SCHEMA,   
        INDEX_NAME, 
        PRIMARY_KEY,    
        "UNIQUE",   
        "CLUSTERED",    
        "TYPE",     
        FILL_FACTOR,    
        INITIAL_SIZE,   
        NULLS,      
        SORT_BOOKMARKS, 
        AUTO_UPDATE,    
        NULL_COLLATION, 
        ORDINAL_POSITION,
        COLUMN_NAME,    
        COLUMN_GUID,    
        COLUMN_PROPID,  
        COLLATION,  
        CARDINALITY,    
        PAGES,      
        FILTER_CONDITION
    --  INTEGRATED
    from master.dbo.SYSREMOTE_INDEXES (
                @table_server,
                @table_catalog,
                @table_schema,
                @index_name,
                NULL,           /* TYPE (index type) */
                @table_name )
    order by 8 desc, 4, 5, 6, 17
go

grant execute on sp_indexes_rowset to public
go

dump tran master with no_log
go
if (charindex('6.00', @@version) > 0)
    begin
    if (exists (select * from sysobjects
            where name = 'sp_indexes_rowset' and type = 'P '))
        begin
        drop procedure sp_indexes_rowset
        dump tran master with no_log
        end
    end
go


print ''
print 'creating sp_primary_keys_rowset'
go

/*  Procedure for 6.0 and 6.5 servers */
create procedure sp_primary_keys_rowset
    (
    @table_name     varchar(255),
    @table_schema       varchar(244) = null
    )
as
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(binary(16),null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o, sysusers u
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and     u.uid = user_id() /* constrain sysusers uid for use in subquery */
    and     (
        suser_id() = 1   /* User is the System Administrator */
        or o.uid = user_id()     /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
           )
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_primary_keys_rowset;2
    (
    @table_schema       varchar(244) = null
    )
as
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(binary(16),null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o, sysusers u
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and     u.uid = user_id() /* constrain sysusers uid for use in subquery */
    and     (
        suser_id() = 1   /* User is the System Administrator */
        or o.uid = user_id()     /* User created the object */
        /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or (    (select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
            from sysprotects p
            where p.id = o.id
            /* get rows for public,current user,user's group */
            and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
            /* check for SELECT,EXECUTE privilege */
            and (action in (193,224)))&1     /* more magic...normalize GRANT */
            ) = 1   /* final magic...compare Grants   */
           )
    order by 2, 3
go

if (charindex('7.00', @@version) = 0 and
    charindex('8.00', @@version) = 0)
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
else
    drop proc sp_primary_keys_rowset
go

/*  Procedure for 7.0 & 8.0 servers */
create procedure sp_primary_keys_rowset
    (
    @table_name     sysname,
    @table_schema   sysname = null
    )
as
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(uniqueidentifier,null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800 -- PRIMARY KEY
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and permissions(o.id) <> 0
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_primary_keys_rowset;2
    (
    @table_schema   sysname = null
    )
as
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(uniqueidentifier,null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800 -- PRIMARY KEY
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and permissions(o.id) <> 0
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_primary_keys_rowset;3
    (
    @table_name     sysname = null,
    @table_schema       sysname = null
    )
as
IF @table_name is not NULL
    BEGIN
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(uniqueidentifier,null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o
    where   o.type in ('U')
    and     o.name = @table_name
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800 -- PRIMARY KEY
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and permissions(o.id) <> 0
    END
ELSE
    BEGIN
    select  TABLE_CATALOG   = db_name(),
            TABLE_SCHEMA    = user_name(o.uid),
            TABLE_NAME      = o.name,   
            COLUMN_NAME     = c.name,
            COLUMN_GUID     = convert(uniqueidentifier,null),
            COLUMN_PROPID   = convert(int,null),
            ORDINAL         = convert(int,
                                      case
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  1) then 1
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  2) then 2
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  3) then 3
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  4) then 4
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  5) then 5
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  6) then 6
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  7) then 7
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  8) then 8
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid,  9) then 9
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 10) then 10
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 11) then 11
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 12) then 12
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 13) then 13
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 14) then 14
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 15) then 15
                                      when c.name = index_col(user_name(o.uid)+'.'+o.name, i.indid, 16) then 16
                                      end
                                     ),
            PK_NAME         = i.name
    from    sysindexes i, syscolumns c, sysobjects o
    where   o.type in ('U')
    and     (@table_schema is null or @table_schema = user_name(o.uid))
    and     o.id = c.id
    and     o.id = i.id
    and     (i.status & 0x800) = 0x800 -- PRIMARY KEY
    and (c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  1) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  2) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  3) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  4) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  5) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  6) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  7) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  8) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid,  9) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 10) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 11) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 12) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 13) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 14) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 15) or
         c.name = index_col (user_name(o.uid)+'.'+o.name, i.indid, 16)
        )
    and permissions(o.id) <> 0
    END
go
dump tran master with no_log
go
create procedure sp_primary_keys_rowset;5
    (
    @table_server       sysname,
    @table_catalog      sysname = null,
    @table_name         sysname = null,
    @table_schema       sysname = null
    )
as
    select
        TABLE_CATALOG,  
        TABLE_SCHEMA,   
        TABLE_NAME, 
        COLUMN_NAME,    
        COLUMN_GUID,    
        COLUMN_PROPID,  
        ORDINAL
        --PK_NAME       
    from master.dbo.SYSREMOTE_PRIMARY_KEYS (
                @table_server,
                @table_catalog,
                @table_schema,
                @table_name )
    order by 1,2,3
go

grant execute on sp_primary_keys_rowset to public
go

dump tran master with no_log
go
if (charindex('6.00', @@version) > 0)
    begin
    if (exists (select * from sysobjects
            where name = 'sp_primary_keys_rowset' and type = 'P '))
        begin
        drop procedure sp_primary_keys_rowset
        dump tran master with no_log
        end
    end
go


print ''
print 'creating sp_provider_types_rowset'
go

/*  Procedure for 6.0 and 6.50 servers */
create proc sp_provider_types_rowset
    (
    @data_type  smallint = null,
    @best_match tinyint  = null
    )
as
    select
        TYPE_NAME       = case when t.usertype = 80 then t.name 
                        else d.type_name 
                        end,
        DATA_TYPE       = d.oledb_data_type,                            
        COLUMN_SIZE     = case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ 
                            then @@max_precision
                            else coalesce(d.column_size,d.data_precision,t.prec) end,
        LITERAL_PREFIX      = d.literal_prefix,
        LITERAL_SUFFIX      = d.literal_suffix,
        CREATE_PARAMS       = convert(varchar(32),e.CREATE_PARAMS),
        IS_NULLABLE     = t.allownulls,
        CASE_SENSITIVE      = d.case_sensitive,
        SEARCHABLE      = d.searchable,
        UNSIGNED_ATTRIBUTE  = d.unsigned_attribute,
        FIXED_PREC_SCALE    = d.fixed_prec_scale,
        AUTO_UNIQUE_VALUE   = d.auto_unique_value, 
        LOCAL_TYPE_NAME     = case  when t.usertype = 80 then t.name 
                        else d.local_type_name
                        end,
        MINIMUM_SCALE       = convert(smallint,
                        case 
                        when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then 0 
                        else null 
                        end),
        MAXIMUM_SCALE       = convert(smallint,
                        case 
                        when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ 
                        then @@max_precision
                        else null 
                        end),
        GUID            = convert(binary(16),null),
        TYPELIB         = convert(varchar(1),null),
        VERSION         = convert(varchar(1),null),
        IS_LONG         = d.is_long,
        BEST_MATCH      = case when t.usertype = 80
                        then convert(bit,0)
                        else d.best_match
                        end,
        IS_FIXEDLENGTH      = convert(bit, 
                        case when d.fixlen is null then 0 else 1 end)
    from    master.dbo.spt_provider_types d, master.dbo.spt_datatype_info_ext e, systypes t
    where   d.ss_dtype = t.type 
    and t.usertype <= 100
    and t.usertype <> 18 /* sysname */
    and (case when t.usertype = 80 /* TIMESTAMP */ then 1 else 0 end 
            = case when d.type_name = 'timestamp' then 1 else 0 end)
    and     t.usertype *= e.user_type 
    and     e.AUTO_INCREMENT = 0
    and     t.type not in (111,109,38,110,55,63)    /* get rid of nullable types */
    and (@data_type is null or d.oledb_data_type = @data_type)
    and (@best_match is null or d.best_match = @best_match)
    order by 2
go
dump tran master with no_log
go

if (charindex('7.00', @@version) = 0 and
    charindex('8.00', @@version) = 0)
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
else
    drop proc sp_provider_types_rowset
go

/*  Procedure for 8.0 server */
create proc sp_provider_types_rowset
    (
    @data_type  smallint = null,
    @best_match tinyint  = null
    )
as
    select
        TYPE_NAME       = case  when t.usertype = 80 then t.name 
                        else d.type_name 
                        end,
        DATA_TYPE       = d.oledb_data_type,                            


        COLUMN_SIZE     = case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ 
                            then @@max_precision
                            else coalesce(d.column_size,d.data_precision,t.prec) end,
        LITERAL_PREFIX      = d.literal_prefix,
        LITERAL_SUFFIX      = d.literal_suffix,
        CREATE_PARAMS       = convert(nvarchar(32),e.CREATE_PARAMS),
        IS_NULLABLE     = t.allownulls,
        CASE_SENSITIVE      = d.case_sensitive,
        SEARCHABLE      = d.searchable,
        UNSIGNED_ATTRIBUTE  = d.unsigned_attribute,
        FIXED_PREC_SCALE    = d.fixed_prec_scale,
        AUTO_UNIQUE_VALUE   = d.auto_unique_value, 
        LOCAL_TYPE_NAME     = case  when t.usertype = 80 then t.name 
                        else d.local_type_name
                        end,
        MINIMUM_SCALE       = convert(smallint,
                        case 
                        when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then 0 
                        else null 
                        end),
        MAXIMUM_SCALE       = convert(smallint,
                        case 
                        when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ 
                        then @@max_precision
                        else null 
                        end),
        GUID            = convert(uniqueidentifier,null),
        TYPELIB         = convert(nvarchar(1),null),
        VERSION         = convert(nvarchar(1),null),
        IS_LONG         = d.is_long,
        BEST_MATCH      = case  when t.usertype = 80
                        then convert(bit,0)
                        else d.best_match
                        end,
        IS_FIXEDLENGTH      = convert(bit, 
                        case when d.fixlen is null then 0 else 1 end)

    from master.dbo.spt_provider_types d
        INNER JOIN master.dbo.systypes t on d.ss_dtype = t.xtype
        LEFT OUTER JOIN master.dbo.spt_datatype_info_ext e on
            t.xusertype = e.user_type
            and e.AUTO_INCREMENT = 0
    where   (@data_type is null or d.oledb_data_type = @data_type)
    and (@best_match is null or d.best_match = @best_match) 
    and t.usertype <= 255
    and t.usertype <> 18 /* sysname */
    order by 2
go

grant execute on sp_provider_types_rowset to public
go

dump tran master with no_log
go
if (charindex('6.00', @@version) > 0)
    begin
    if (exists (select * from sysobjects
        where name = 'sp_provider_types_rowset' and type = 'P '))
        begin
        drop procedure sp_provider_types_rowset
        dump tran master with no_log
        end
    end
go


print ''
print 'creating sp_procedure_params_rowset'
go

/*  Procedure for 6.0 and 6.50 servers */
create procedure sp_procedure_params_rowset
    (
    @procedure_name     varchar(255) = null,
    @group_number       int = null,
    @procedure_schema   varchar(255) = null,
    @parameter_name     varchar(255) = null
    )
as
IF @procedure_name is not null
    BEGIN
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+((c.status/64)&1)),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,
                        case when d.oledb_data_type = 11 /*DBTYPE_BOOL*/ 
                        then 0 else 1
                        end),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec 
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        syscolumns c,
        sysobjects o,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.name = @procedure_name
    and o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.number = @group_number
    and c.type = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.usertype = t.usertype
    and (t.usertype != 80 or d.type_name='timestamp')
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = convert(sysname,'int'),
        LOCAL_TYPE_NAME     = convert(sysname,'int')
    from
        syscomments c,
        sysobjects o
    where
        o.name = @procedure_name
    and o.type = 'P'                        /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    and c.id = o.id
    and c.number = @group_number
    and c.colid = 1
    order by 2, 3, 5
    END
ELSE
    BEGIN
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+((c.status/64)&1)),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,
                        case when d.oledb_data_type = 11 /*DBTYPE_BOOL*/ 
                        then 0 else 1
                        end),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        syscolumns c,
        sysobjects o,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.type = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.usertype = t.usertype
    and (t.usertype != 80 or d.type_name='timestamp')
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = convert(sysname,'int'),
        LOCAL_TYPE_NAME     = convert(sysname,'int')
    from
        syscomments c,
        sysobjects o
    where
        o.type = 'P'                        /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    and c.id = o.id
    and     c.colid = 1
    order by 2, 3, 5
    END
go
dump tran master with no_log
go
create procedure sp_procedure_params_rowset;2
    (
    @handle         int output,
    @scrollopt      int output,
    @ccopt          int output,
    @rows           int output,
    @procedure_name     varchar(255) = null,
    @group_number       int = null,
    @procedure_schema   varchar(255) = null,
    @parameter_name     varchar(255) = null
    )
as
    declare @ret int


SET NOCOUNT ON

    create table #spprocparamrowset1
        (
        PROCEDURE_CATALOG   sysname not null,
        PROCEDURE_SCHEMA    sysname not null,
        PROCEDURE_NAME      varchar(35) not null,
        PARAMETER_NAME      sysname not null,
        ORDINAL_POSITION    smallint not null,
        PARAMETER_TYPE      smallint null,
        PARAMETER_HASDEFAULT    tinyint null,
        PARAMETER_DEFAULT   varchar(255) null,
        IS_NULLABLE     bit not null,
        DATA_TYPE       smallint null,
        CHARACTER_MAXIMUM_LENGTH int null,
        CHARACTER_OCTET_LENGTH  int null,
        NUMERIC_PRECISION   smallint null,
        NUMERIC_SCALE       smallint null,
        DESCRIPTION     varchar(1) null,
        TYPE_NAME       sysname null,
        LOCAL_TYPE_NAME     sysname null,
        )

IF @procedure_name is not null
    BEGIN
    insert into #spprocparamrowset1
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+((c.status/64)&1)),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,
                        case when d.oledb_data_type = 11 /*DBTYPE_BOOL*/ 
                        then 0 else 1
                        end),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        syscolumns c,
        sysobjects o,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.name = @procedure_name
    and o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.number = @group_number
    and c.type = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.usertype = t.usertype
    and (t.usertype != 80 or d.type_name='timestamp')
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = convert(sysname,'int'),
        LOCAL_TYPE_NAME     = convert(sysname,'int')
    from
        syscomments c,
        sysobjects o
    where
        o.name = @procedure_name
    and o.type = 'P'                        /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    and c.id = o.id
    and c.number = @group_number
    and c.colid = 1
    order by 2, 3, 5
    END
ELSE
    BEGIN
    insert into #spprocparamrowset1
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+((c.status/64)&1)),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,
                        case when d.oledb_data_type = 11 /*DBTYPE_BOOL*/ 
                        then 0 else 1
                        end),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        syscolumns c,
        sysobjects o,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.type = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.usertype = t.usertype
    and (t.usertype != 80 or d.type_name='timestamp')
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint,0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = convert(sysname,'int'),
        LOCAL_TYPE_NAME     = convert(sysname,'int')
    from
        syscomments c,
        sysobjects o
    where
        o.type = 'P'                        /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    and c.id = o.id
    and     c.colid = 1
    order by 2, 3, 5
    END

    exec @ret = sp_cursoropen @handle output, 'select * from #spprocparamrowset1',
        @scrollopt output, @ccopt output, @rows output

    drop table #spprocparamrowset1
    return isnull(@ret,0)
go
dump tran master with no_log
go
create procedure sp_procedure_params_rowset;3
as
    select
        PROCEDURE_CATALOG   = convert(sysname, ' '),
        PROCEDURE_SCHEMA    = convert(sysname, ' '),
        PROCEDURE_NAME      = convert(varchar(35), ' '),
        PARAMETER_NAME      = convert(sysname, ' '),
        ORDINAL_POSITION    = convert(smallint, 0),
        PARAMETER_TYPE      = convert(smallint, 0),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(varchar(255),null),
        IS_NULLABLE     = convert(bit, 0),
        DATA_TYPE       = convert(smallint, 0),
        CHARACTER_MAXIMUM_LENGTH= convert(int, 0),
        CHARACTER_OCTET_LENGTH  = convert(int, 0),
        NUMERIC_PRECISION   = convert(smallint, 0),
        NUMERIC_SCALE       = convert(smallint, 0),
        DESCRIPTION     = convert(varchar(1),null),
        TYPE_NAME       = convert(sysname,null),
        LOCAL_TYPE_NAME     = convert(sysname,null)
    where   1=0
go
dump tran master with no_log
go


if (charindex('7.00', @@version) > 0 or
    charindex('8.00', @@version) > 0)
    drop procedure sp_procedure_params_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 7.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/*  Procedure for 7.0 servers */
create procedure sp_procedure_params_rowset
    (
    @procedure_name     sysname,
    @group_number       int = 1,
    @procedure_schema   sysname = null,
    @parameter_name     sysname = null
    )
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+c.isoutparam),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,ColumnProperty(c.id,c.name,'AllowsNull')),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.name = @procedure_name
    and o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.number = @group_number
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = convert(sysname,N'int'),
        LOCAL_TYPE_NAME     = convert(sysname,N'int')
    from
        sysobjects o,
        syscomments c
    where
        o.name = @procedure_name
    and o.id = c.id 
    and c.number = @group_number
    and c.colid = 1
    and o.type = 'P'                        /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    order by 2, 3, 5
go
dump tran master with no_log
go
create procedure sp_procedure_params_rowset;2
    (
    @procedure_schema   sysname = null,
    @parameter_name     sysname = null
    )
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+c.isoutparam),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,ColumnProperty(c.id,c.name,'AllowsNull')),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.type = 'P'                            /* Just Procedures */
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = convert(sysname,N'int'),
        LOCAL_TYPE_NAME     = convert(sysname,N'int')
    from
        sysobjects o,
        syscomments c
    where
        o.type = 'P'        /* Just Procedures */
    and o.id = c.id 
    and c.colid = 1
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    order by 2, 3, 5
go

if (charindex('8.00', @@version) > 0)
    drop procedure sp_procedure_params_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/*  Procedure for 8.0 servers */
create procedure sp_procedure_params_rowset
    (
    @procedure_name     sysname,
    @group_number       int = 1,
    @procedure_schema   sysname = null,
    @parameter_name     sysname = null
    )
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+c.isoutparam),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,ColumnProperty(c.id,c.name,'AllowsNull')),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.name = @procedure_name
    and     (o.type in ('P', 'TF', 'IF') OR (len(c.name) > 0 and o.type = 'FN'))
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and ((c.number = @group_number and o.type = 'P') 
            or (c.number = 0 and o.type = 'FN')
            or (c.number = 1 and o.type in ('TF', 'IF')))
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = convert(sysname,N'int'),
        LOCAL_TYPE_NAME     = convert(sysname,N'int')
    from
        sysobjects o,
        syscomments c
    where
        o.name = @procedure_name
    and o.id = c.id 
    and c.number = @group_number
    and c.colid = 1
    and o.type = 'P'            /* Just Procedures */
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    UNION ALL
    SELECT         /* UDF return value row*/
        PROCEDURE_CATALOG        = db_name(),
        PROCEDURE_SCHEMA         = user_name(o.uid),
        PROCEDURE_NAME           = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME           = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION         = convert(smallint, 0),
        PARAMETER_TYPE           = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT     = convert(tinyint, 0),
        PARAMETER_DEFAULT        = convert(nvarchar(255),null),
        IS_NULLABLE              = convert(bit, c.isnullable),
        DATA_TYPE                = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH = convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH   = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION        = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE            = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION              = convert(nvarchar(1),null),
        TYPE_NAME                = d.type_name,
        LOCAL_TYPE_NAME          = d.local_type_name
    FROM
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    WHERE
        o.name = @procedure_name
    and o.id = c.id 
    and c.number = 0
    and c.colid = 0
    and o.type = 'FN'           /* UDF scalar functions */
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    UNION ALL
    SELECT         /* UDF table value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@TABLE_RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint, 0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 0),             /*DBTYPE_EMPTY*/
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129        /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128  /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130        /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129   /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128  /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130        /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(50), N'Result table returned by table valued function'),
        TYPE_NAME       = N'table',
        LOCAL_TYPE_NAME     = N'table'
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d
    where
        o.name = @procedure_name
    and o.id = c.id 
    and c.number = 0
    and c.colid = 1
    and o.type in ('TF', 'IF')          /* UDF table functions */
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@TABLE_RETURN_VALUE')
    order by 2, 3, 5
go
dump tran master with no_log
go
create procedure sp_procedure_params_rowset;2
    (
    @procedure_schema   sysname = null,
    @parameter_name     sysname = null
    )
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = c.name,
        ORDINAL_POSITION    = convert(smallint, c.colid),
        PARAMETER_TYPE      = convert(smallint, 1+c.isoutparam),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,ColumnProperty(c.id,c.name,'AllowsNull')),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    where
        (o.type in ('P', 'TF', 'IF') OR (len(c.name) > 0 and o.type = 'FN'))
    and (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and o.id = c.id
    and (o.type = 'P' or (c.number = 0 and o.type = 'FN') or (c.number = 1 and o.type in ('TF', 'IF')))
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and (@parameter_name is null or @parameter_name = c.name)
    UNION ALL
    SELECT         /* return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint,0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 3 /*DBTYPE_I4*/),
        CHARACTER_MAXIMUM_LENGTH= convert(int,null),
        CHARACTER_OCTET_LENGTH  = convert(int,null),
        NUMERIC_PRECISION   = convert(smallint,10),
        NUMERIC_SCALE       = convert(smallint,null),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = convert(sysname,N'int'),
        LOCAL_TYPE_NAME     = convert(sysname,N'int')
    from
        sysobjects o,
        syscomments c
    where
        o.type = 'P'            /* Just Procedures */
    and o.id = c.id 
    and c.colid = 1
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    UNION ALL
    SELECT         /* UDF return value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint, 0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit, c.isnullable),
        DATA_TYPE       = d.oledb_data_type,
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = d.type_name,
        LOCAL_TYPE_NAME     = d.local_type_name
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d,
        systypes t
    where
        o.id = c.id 
    and c.number = 0
    and c.colid = 0
    and o.type = 'FN'           /* UDF scalar functions */
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and c.xusertype = t.xusertype
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@RETURN_VALUE')
    UNION ALL
    SELECT         /* UDF table value row*/
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(c.number,5))),
        PARAMETER_NAME      = convert(sysname,'@TABLE_RETURN_VALUE'),
        ORDINAL_POSITION    = convert(smallint, 0),
        PARAMETER_TYPE      = convert(smallint, 4 /*DBPARAMTYPE_RETURNVALUE*/),
        PARAMETER_HASDEFAULT    = convert(tinyint, 0),
        PARAMETER_DEFAULT   = convert(nvarchar(255),null),
        IS_NULLABLE     = convert(bit,0),
        DATA_TYPE       = convert(smallint, 0),         /*DBTYPE_EMPTY*/
        CHARACTER_MAXIMUM_LENGTH= convert(int,
                        case 
                        when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size,c.length/2)
                        else null 
                        end),
        CHARACTER_OCTET_LENGTH  = convert(int,
                        case when d.oledb_data_type = 129 /*DBTYPE_STR*/ 
                            or d.oledb_data_type = 128 /*DBTYPE_BYTES*/
                        then coalesce(d.column_size,c.length)
                        when d.oledb_data_type = 130 /*DBTYPE_WSTR*/
                        then coalesce(d.column_size*2,c.length)
                        else null 
                        end),
        NUMERIC_PRECISION   = convert(smallint,
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.prec
                            when (d.fixed_prec_scale =1  or d.oledb_data_type =5 or d.oledb_data_type =4)
                            then d.data_precision else null end),
        NUMERIC_SCALE       = convert(smallint, 
                        case when d.oledb_data_type = 131 /*DBTYPE_NUMERIC*/ then c.scale else null end),
        DESCRIPTION     = convert(nvarchar(1),null),
        TYPE_NAME       = N'table',
        LOCAL_TYPE_NAME     = N'table'
    
    from
        sysobjects o,
        syscolumns c,
        master.dbo.spt_provider_types d
    where
        o.id = c.id 
    and c.number = 0
    and c.colid = 1
    and o.type in ('TF', 'IF')          /* UDF table functions */
    and c.xtype = d.ss_dtype
    and c.length = case when d.fixlen > 0 then d.fixlen else c.length end
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and (@parameter_name is null or @parameter_name = '@TABLE_RETURN_VALUE')
    order by 2, 3, 5
go

grant execute on sp_procedure_params_rowset to public
go

dump tran master with no_log
go
if (charindex('6.00', @@version) > 0)
    begin
    if (exists (select * from sysobjects
            where name = 'sp_procedure_params_rowset' and type = 'P '))
        begin
        drop procedure sp_procedure_params_rowset
        dump tran master with no_log
        end
    end
go


print ''
print 'creating sp_procedures_rowset'
go


/* pre 7.0 version */
create procedure sp_procedures_rowset
    (
    @procedure_name     varchar(255), 
    @group_number       int = 1,
    @procedure_schema   varchar(255) = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(varchar(1),null),
        DESCRIPTION     = convert(varchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    
        sysobjects o, 
        syscomments p,
        sysusers u
    where
            o.name = @procedure_name
        and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type = 'P'        /* Object type of Procedure */
    and     p.colid = 1
    and     p.id = o.id
    and p.number = @group_number
    and     u.uid = user_id()   /* constrain sysusers uid for use in subquery */
    and     (   suser_id() = 1  /* User is the System Administrator */
        or  o.uid = user_id()   /* User created the object */
            /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or  ((select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
             from sysprotects p
             where p.id = o.id
                 /*  get rows for public,current user,user's group */
                 and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
                 /* check for SELECT,EXECUTE privilege */
             and (action in (193,224)))&1    /* more magic...normalize GRANT */
            ) = 1    /* final magic...compare Grants    */
        )
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_procedures_rowset;2
    (
    @procedure_schema   varchar(255) = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(varchar(35),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(varchar(1),null),
        DESCRIPTION     = convert(varchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    
        sysobjects o, 
        syscomments p,
        sysusers u
    where
            (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type = 'P'        /* Object type of Procedure */
    and     p.colid = 1
    and     p.id = o.id
    and     u.uid = user_id()   /* constrain sysusers uid for use in subquery */
    and     (   suser_id() = 1  /* User is the System Administrator */
        or  o.uid = user_id()   /* User created the object */
            /* here's the magic... select the highest precedence of permissions in the order (user,group,public)  */
        or  ((select max(((sign(uid)*abs(uid-16383))*2)+(protecttype&1))
             from sysprotects p
             where p.id = o.id
                 /*  get rows for public,current user,user's group */
                 and (p.uid = 0 or p.uid = user_id() or p.uid = u.gid)
                 /* check for SELECT,EXECUTE privilege */
             and (action in (193,224)))&1    /* more magic...normalize GRANT */
            ) = 1    /* final magic...compare Grants    */
        )
    order by 2, 3
go
dump tran master with no_log
go

if (charindex('7.00', @@version) > 0 or
    charindex('8.00', @@version) > 0)
    drop procedure sp_procedures_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 7.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/* 7.0 version */
create procedure sp_procedures_rowset
    (
    @procedure_name     sysname, 
    @group_number       int = 1,
    @procedure_schema   sysname = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(nvarchar(1),null),
        DESCRIPTION     = convert(nvarchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    
        sysobjects o, 
        syscomments p
    where
        permissions(o.id) <> 0
    and o.name = @procedure_name
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type = 'P'        /* Object type of Procedure */
    and     p.colid = 1
    and     p.id = o.id
    and p.number = @group_number
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_procedures_rowset;2
    (
    @procedure_schema   sysname = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(nvarchar(1),null),
        DESCRIPTION     = convert(nvarchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    sysobjects o, syscomments p
    where
        permissions(o.id) <> 0
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type = 'P'        /* Object type of Procedure */
    and p.colid = 1
    and p.id = o.id
    order by 2, 3
go

if (charindex('8.00', @@version) > 0)
    drop procedure sp_procedures_rowset
else
begin
    print ''
    print ''
    print 'Warning:'
    print 'you are installing the stored procedures '
    print 'on a pre 8.0 SQL Server.'
    print 'Ignore the following errors.'
end
go

/* 8.0 version */
create procedure sp_procedures_rowset
    (
    @procedure_name     sysname, 
    @group_number       int = 1,
    @procedure_schema   sysname = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(nvarchar(1),null),
        DESCRIPTION     = convert(nvarchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    
        sysobjects o, 
        syscomments p
    where
        permissions(o.id) <> 0
    and o.name = @procedure_name
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type in ('P', 'FN', 'TF', 'IF')   /* Object type of Procedure */
    and     p.colid = 1
    and     p.id = o.id
    and p.number = @group_number
    order by 2, 3
go
dump tran master with no_log
go
create procedure sp_procedures_rowset;2
    (
    @procedure_schema   sysname = null
    )       
as
    select
        PROCEDURE_CATALOG   = db_name(),
        PROCEDURE_SCHEMA    = user_name(o.uid),
        PROCEDURE_NAME      = convert(nvarchar(134),o.name +';'+ ltrim(str(p.number,5))),
        PROCEDURE_TYPE      = convert(smallint, 3 /*DB_PT_FUNCTION*/),
        PROCEDURE_DEFINITION    = convert(nvarchar(1),null),
        DESCRIPTION     = convert(nvarchar(1),null),
        DATE_CREATED        = o.crdate,
        DATE_MODIFIED       = convert(datetime,null)
    from    sysobjects o, syscomments p
    where
        permissions(o.id) <> 0
    and     (@procedure_schema is null or @procedure_schema = user_name(o.uid))
    and     o.type in ('P', 'FN', 'TF', 'IF')   /* Object type of Procedure */
    and p.colid = 1
    and p.id = o.id
    order by 2, 3
go

grant execute on sp_procedures_